import types

class PyAimsAlgoComponent( GenericMakerComponent ):
  _name = 'pyaimsalgo'

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip' )
      if buildconfigVersion < 2.0:
        build = os.path.join( self.buildDir(), 'src', 'sip' )
      else:
        build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )
      self.setupDeps( instances )

  def dependencies( self ):
    return [ 'aimsalgo', 'pyaims' ]


  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return
    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip' )
    if buildconfigVersion < 2:
      build = os.path.join( self.buildDir(), 'src', 'sip' )
      if os.access( source, os.R_OK | os.W_OK ):
        cwd = os.getcwd()
        os.chdir( source )
        pyaims = getInstance( PyAimsComponent )
        pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
        os.system( sys.executable + ' "' \
                  + os.path.join( pad, 'maketemplates.py' ) + '" -s "' + pad \
                  + '" -t "' + os.path.join( pad, 'typessub.py' ) \
                  + '" -t aimsalgotypessub.py -i generatedtypes.py -c -o "' \
                  + build + '"' )
        os.chdir( cwd )
    else:
      build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      cwd = os.getcwd()
      os.chdir( source )
      pyaims = getInstance( PyAimsComponent )
      pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
      os.system( sys.executable + ' "' \
                 + os.path.join( pad, 'maketemplates.py' ) + '" -s "' + pad \
                 + '" -t "' + os.path.join( pad, 'typessub.py' ) \
                 + '" -t aimsalgotypessub.py -i generatedtypes.py -c -o "' \
                 + build + '"' )
      os.chdir( cwd )
    # regular build
    print 'regular build'
    GenericMakerComponent.build( self, instances )


  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma.aimsalgo soma.wip.aimsalgo'

  def libraries(self):
    return []
