#-----------------------------------------------------------------------------
class CartoBaseComponent( GenericMakerComponent ):
  _name = 'cartobase'

  optionsDescription = GenericMakerComponent.optionsDescription.copy()
  optionsDescription.update( {
    'dlopen': (None, 'include dynamic library loading plugins support (default: yes)'),
    'boost': (None, 'include boost library enhancements (default: yes)'),
  } )

  def __init__( self, options ):
    GenericMakerComponent.__init__( self, options )
    # Default options values
    self.setDefaultOption( 'dlopen', 1 )
    self.setDefaultOption( 'boost', 1 )
    self._boost = 0

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      # Define substitution variables
      defines = self.get( 'defines' )
      if not defines:
        defines = []
      if not self.getOption( 'dlopen' ):
        self._data[ 'dlopen' ] = 'CARTO_NO_DLOPEN'
        defines.append( 'CARTO_NO_DLOPEN' )
      if not self._boost:
        self._data[ 'boost' ] = 'CARTO_NO_BOOST'
        defines.append( 'CARTO_NO_BOOST' )
      self._data[ 'defines' ] = defines
      os.environ[ 'SHFJ_SHARED_PATH' ] = os.path.join( self.buildDir(), 'share' )

  def _libraries( self ):
    return [ 'cartobase', 'cartobase_1', 'cartobase_0' ]

  def dependencies( self ):
    deps = [ SigCppComponent, 'libxml2' ]
    if self.getOption( 'dlopen' ) and systemname != 'cygwin' \
        and systemname != 'windows':
      deps.append( DlopenComponent )
    if systemname == 'windows':
      deps.append( WinSockComponent )
    else:
      deps.append( PThreadComponent )
    if self.getOption( 'boost' ) \
      and weakDependency( BoostComponent, self ):
      deps.append( BoostComponent )
      self._boost = 1
    return deps

  def atVersionChange( self, newver, perforce ):
    source = self.get( 'sources' )
    ver = self.get( 'version' )
    
    # update modules list
    modules = []
    for d in glob.glob( os.path.join( source, 'shared/plugins/*.plugins' ) ):
      if not os.path.islink( d ):
        modules.append( d )
    for i in modules:
      f = open( i, 'r' )
      txt = re.sub( ver, newver, f.read() )
      f.close()
      # rewrite file
      perforce.p4edit( i )
      f = open( i, 'w' )
      f.write( txt )
      f.close()

    # update version in src/lib/config/version.h+.cc
    self.updateSourceVersion( newver, perforce )

  # update version in src/lib/config/version.h+.cc
  def updateSourceVersion( self, version, perforce ):
    src = os.path.join( self.get( 'sources' ),
                        'src/lib/config/version.h' )
    perforce.p4edit( src )
    pattern = re.compile( 'CARTOBASE_VERSION[ \t]+0x([0-9a-fA-F]+)',
                          re.MULTILINE )
    f = open( src, 'r' )
    ver = map( lambda x: int(x), version.split( '.' ) )
    vernum = ver[0] * 0x10000
    if len( ver ) >= 2:
      vernum += ver[1] * 0x100
    if len( ver ) >= 3:
      vernum += ver[2]
    txt = pattern.sub( 'CARTOBASE_VERSION ' + hex( vernum ),
                       f.read() )
    f.close()
    # rewrite file
    f = open( src, 'w' )
    f.write( txt )
    f.close()

    src = os.path.join( self.get( 'sources' ),
                        'src/lib/config/version.cc' )
    perforce.p4edit( src )
    pattern = re.compile( '^(\s*)(s\s*<<\s*("alpha")?("beta")?;)$',
		          re.MULTILINE )
    f = open( src, 'r' )
    txt = pattern.sub( '\\1// \\2',f.read() )
    f.close()
    # rewrite file
    f = open( src, 'w' )
    f.write( txt )
    f.close()


