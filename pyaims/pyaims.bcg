import types

class PyAimsComponent( GenericMakerComponent ):
  _name = 'pyaims'

  def postInit( self ):
    if not self._initialized:
      if self._found:
        inc = self._data.get( 'include' )
        if type( inc ) is not types.ListType:
          if inc is None:
            inc = [ self.includeDir() ]
          else:
            inc = [ inc ]
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip' )
      build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )
      self.setupDeps( instances )

  def dependencies( self ):
    return [ "aimsdata", PyQtComponent, NumpyComponent ]


  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return
    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip' )
    build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
    cwd = os.getcwd()
    os.chdir( source )
    cmd = sys.executable + ' maketemplates.py -c -o "' + build + '"'
    print cmd
    res = os.system( cmd )
    if res != 0:
      raise RuntimeError( 'maketemplates.py failed: return code:' \
        + str( res ) )
    os.chdir( cwd )
    # regular build
    print 'regular build'
    GenericMakerComponent.build( self, instances )

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma.aims soma.wip.aims'
