# Defines the following variables:
#   @PROJECT_NAME@_VERSION_MAJOR
#   @PROJECT_NAME@_VERSION_MINOR
#   @PROJECT_NAME@_VERSION_PATCH
#   @PROJECT_NAME@_VERSION
#   @PROJECT_NAME_UPPER@_BINARY_DIR
#   @PROJECT_NAME_UPPER@_DEFINITIONS
#   @PROJECT_NAME_UPPER@_INCLUDE_DIRS
#   @PROJECT_NAME_UPPER@_LIBRARIES
#   @PROJECT_NAME_UPPER@_FOUND

# Set version variables
set( @PROJECT_NAME@_VERSION_MAJOR @BRAINVISA_PACKAGE_VERSION_MAJOR@ )
set( @PROJECT_NAME@_VERSION_MINOR @BRAINVISA_PACKAGE_VERSION_MINOR@ )
set( @PROJECT_NAME@_VERSION_PATCH @BRAINVISA_PACKAGE_VERSION_PATCH@ )
set( @PROJECT_NAME@_VERSION @BRAINVISA_PACKAGE_VERSION_MAJOR@.@BRAINVISA_PACKAGE_VERSION_MINOR@.@BRAINVISA_PACKAGE_VERSION_PATCH@ )
# Set @PROJECT_NAME_UPPER@_BINARY_DIR
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH )
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )

find_package( Sigc++2 REQUIRED )
find_package( LibXml2 REQUIRED )
find_package( Boost REQUIRED )
find_package( PythonInterp )
if( PYTHONINTERP_FOUND )
  find_package( PythonLibs )
  find_package( SIP )
endif( PYTHONINTERP_FOUND )


get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH )
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )


set( @PROJECT_NAME_UPPER@_DEFINITIONS @AIMS_DEFINITIONS@ )
set( @PROJECT_NAME_UPPER@_INCLUDE_DIRS
     "${@PROJECT_NAME_UPPER@_BINARY_DIR}/include"
     ${Sigc++2_INCLUDE_DIRS} 
     "${LIBXML2_INCLUDE_DIR}"
     ${Boost_INCLUDE_DIRS} )
set( @PROJECT_NAME_UPPER@_SIP_DIRECTORY "${@PROJECT_NAME_UPPER@_BINARY_DIR}/@AIMS_RELATIVE_SIP_DIRECTORY@" )

# if( @PROJECT_NAME@_IS_COMPILED )
  set( AIMS_AIMSALGO_LIB aimsalgo )
  set( AIMS_PYAIMS_LIB pyaims )
# else( @PROJECT_NAME@_IS_COMPILED )
#   find_library( AIMS_AIMSALGO_LIB aimsalgo "${@PROJECT_NAME_UPPER@_BINARY_DIR}/lib" )
#   find_library( AIMS_PYAIMS_LIB pyaims "${@PROJECT_NAME_UPPER@_BINARY_DIR}/lib" )
#   MESSAGE( "not @PROJECT_NAME@_IS_COMPILED AIMS_AIMSALGO_LIB: " ${AIMS_AIMSALGO_LIB} )
# endif( @PROJECT_NAME@_IS_COMPILED )
set( @PROJECT_NAME_UPPER@_LIBRARIES "${AIMS_AIMSALGO_LIB}" )
set( @PROJECT_NAME_UPPER@_SIP_LIBRARIES ${AIMS_PYAIMS_LIB} )

if( AIMS_AIMSALGO_LIB )
  set( @PROJECT_NAME_UPPER@_FOUND true )
else( AIMS_AIMSALGO_LIB )
  set( @PROJECT_NAME_UPPER@_FOUND false )
endif( AIMS_AIMSALGO_LIB )
