set( aims_VERSION_MAJOR @aims_VERSION_MAJOR@ )
set( aims_VERSION_MINOR @aims_VERSION_MINOR@ )
set( aims_VERSION_PATCH @aims_VERSION_PATCH@ )
set( aims_VERSION @aims_VERSION@ )

find_package( Sigc++2 REQUIRED )
find_package( LibXml2 REQUIRED )
find_package( Boost REQUIRED )
find_package( PythonInterp )
if( PYTHONINTERP_FOUND )
  find_package( PythonLibs )
  find_package( SIP )
endif( PYTHONINTERP_FOUND )
find_package( VTK QUIET )


if( SOMA_BUILD_ALL_FROM_SOURCES )
  set( AIMS_BINARY_DIR "@AIMS_BINARY_DIR@" )
else( SOMA_BUILD_ALL_FROM_SOURCES )
  get_filename_component( AIMS_BINARY_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH )
  get_filename_component( AIMS_BINARY_DIR "${AIMS_BINARY_DIR}" PATH )
  get_filename_component( AIMS_BINARY_DIR "${AIMS_BINARY_DIR}" PATH )
endif( SOMA_BUILD_ALL_FROM_SOURCES )

set( AIMS_DEFINITIONS @AIMS_DEFINITIONS@ )
set( AIMS_INCLUDE_DIRS
     "${AIMS_BINARY_DIR}/include"
     ${Sigc++2_INCLUDE_DIRS} 
     "${LIBXML2_INCLUDE_DIR}"
     ${Boost_INCLUDE_DIRS} )
set( AIMS_SIP_DIRECTORY "${AIMS_BINARY_DIR}/@AIMS_RELATIVE_SIP_DIRECTORY@" )

find_library( AIMS_AIMSALGO_LIB aimsalgo "${AIMS_BINARY_DIR}/lib" )
set( AIMS_LIBRARIES "${AIMS_AIMSALGO_LIB}" )
find_library( AIMS_AIMSGUI_LIB aimsgui "${AIMS_BINARY_DIR}/lib" )
set( AIMS_GUI_LIBRARIES ${AIMS_LIBRARIES} "${AIMS_AIMSGUI_LIB}" )
find_library( AIMS_PYAIMS_LIB pyaims "${AIMS_BINARY_DIR}/lib" )
set( AIMS_SIP_LIBRARIES ${AIMS_PYAIMS_LIB} )

if( AIMS_AIMSALGO_LIB )
  set( AIMS_FOUND true )
else( AIMS_AIMSALGO_LIB )
  set( AIMS_FOUND false )
endif( AIMS_AIMSALGO_LIB )
